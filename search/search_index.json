{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>     A simple shopping app.      Report Bug     \u00b7     Request Feature </p>"},{"location":"#about-the-project","title":"About The Project","text":"<p>Introducing LenoreShop, the ultimate shopping list app designed to streamline your grocery shopping experience. Whether you're managing a single shopping trip or juggling multiple stores, LenoreShop has you covered with its intuitive features and user-friendly interface.</p> <p>Key Features:</p> <ul> <li>Multiple Stores: Easily add as many stores as you frequent, ensuring all your favorite shopping destinations are covered.</li> <li>Unlimited Shopping Lists: Create and manage multiple shopping lists for each store, helping you stay organized and efficient.</li> <li>Customizable Aisles: Add aisles specific to each store and arrange them in the order you typically shop, making your trips faster and more convenient.</li> <li>Item Organization: Add items to your lists by aisle, so you never miss a thing and can quickly find what you need.</li> </ul> <p>Why Choose LenoreShop? LenoreShop is perfect for anyone who needs to shop, offering a tailored shopping experience that adapts to your personal preferences. With its seamless integration of Django for a robust backend and Vue for a sleek, responsive frontend, LenoreShop ensures a smooth and reliable user experience.</p> <p>Simplify your shopping routine with LenoreShop and enjoy the convenience of a perfectly organized shopping trip every time.</p> <p>(back to top)</p>"},{"location":"#built-with","title":"Built With","text":"<p>(back to top)</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Welcome to LenoreShop! This guide will help you set up and run the application using Docker and Docker Compose.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following installed on your system:</p> <ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"#step-1-create-a-env-file","title":"Step 1: Create a <code>.env</code> File","text":"<p>Create a <code>.env</code> file in the root directory of the project. This file will store environment variables required to run the application. Below is an example of the variables you need to define:</p> <pre><code>DEBUG=0\nSECRET_KEY=mysupersecretkey\nDJANGO_ALLOWED_HOSTS=(docker-ip)\nCSRF_TRUSTED_ORIGINS=http://(docker-ip)\nSQL_ENGINE=django.db.backends.postgresql\nSQL_DATABASE=lenoreshop\nSQL_USER=lenoreshopuser\nSQL_PASSWORD=somepassword\nSQL_HOST=db\nSQL_PORT=5432\nDATABASE=postgres\nDJANGO_SUPERUSER_PASSWORD=suepervisorpassword\nDJANGO_SUPERUSER_EMAIL=someone@somewhere.com\nDJANGO_SUPERUSER_USERNAME=supervisor\n</code></pre> <p>Adjust these values according to your environment and application requirements.  Make sure to modify the DJANGO_ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS sections.</p>"},{"location":"#step-2-create-a-docker-composeyml-file","title":"Step 2: Create a <code>docker-compose.yml</code> File","text":"<p>Create a <code>docker-compose.yml</code> file in the root directory of the project. Below is an example configuration:</p> <pre><code>services:\n  frontend:\n    image: novanglus96/lenoreshop_frontend:latest\n    container_name: lenoreshop_frontend\n    networks:\n      - lenoreshop\n    restart: unless-stopped\n    expose:\n      - 80\n    env_file:\n      - ./.env\n  backend:\n    image: novanglus96/lenoreshop_backend:latest\n    container_name: lenoreshop_backend\n    command: /home/app/web/start.sh\n    volumes:\n      - static_volume:/home/app/web/staticfiles\n      - media_volume:/home/app/web/mediafiles\n    expose:\n      - 8000\n    depends_on:\n      - db\n    networks:\n      - lenoreshop\n    env_file:\n      - ./.env\n  db:\n    image: postgres:15\n    container_name: lenoreshop_db\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    env_file:\n      - ./.env\n    networks:\n      - lenoreshop\n    environment:\n      - POSTGRES_USER=${SQL_USER}\n      - POSTGRES_PASSWORD=${SQL_PASSWORD}\n      - POSTGRES_DB=${SQL_DATABASE}\n  nginx:\n    image: novanglus96/lenoreapps_proxy:latest\n    container_name: lenoreshop_nginx\n    ports:\n      - \"8080:80\"\n    volumes:\n      - static_volume:/home/app/web/staticfiles\n      - media_volume:/home/app/web/mediafiles\n    depends_on:\n      - backend\n      - frontend\n    networks:\n      - lenoreshop\n\nnetworks:\n  lenoreshop:\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n</code></pre>"},{"location":"#step-3-run-the-application","title":"Step 3: Run the Application","text":"<ol> <li>Start the services:</li> </ol> <p><code>bash    docker compose up -d</code></p> <ol> <li>Access the application in your browser at <code>http://localhost:8080</code>.</li> </ol>"},{"location":"#notes","title":"Notes","text":"<ul> <li>Adjust exposed ports as needed for your environment.</li> <li>If you encounter any issues, ensure your <code>.env</code> file has the correct values and your Docker and Docker Compose installations are up to date.</li> </ul> <p>Enjoy using LenoreShop!</p> <p>(back to top)</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[ ] v2.0 Release<ul> <li>[ ] Improved UI</li> <li>[ ] Offline Mode</li> </ul> </li> <li>[ ] Google/Alexa assistant integration</li> <li>[ ] Import from other sources</li> </ul> <p>See the open issues for a full list of proposed features (and known issues).</p> <p>(back to top)</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.</p> <p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again!</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol> <p>(back to top)</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE.txt</code> for more information.</p> <p>(back to top)</p>"},{"location":"#support","title":"Support","text":"<p>Or</p> <p> </p>"},{"location":"#contact","title":"Contact","text":"<p>John Adams - Lenore.Apps@gmail.com</p> <p>Project Link: https://github.com/Novanglus96/LenoreShop</p> <p>(back to top)</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>A heartfelt thanks to our Patrons for their generous support! Your contributions help us maintain and improve this project.</p>"},{"location":"#thank-you-to-our-supporters","title":"\u2b50 Thank You to Our Supporters:","text":"<p>Want to see your name here? Support us on Patreon to join our amazing community and shape the future of LenoreShop!</p> <p>(back to top)</p>"},{"location":"about/","title":"About","text":"<p>     A simple shopping app.      Explore the docs \u00bb Report Bug     \u00b7     Request Feature </p> Table of Contents <ol> <li> About The Project <ul> <li>Built With</li> </ul> </li> <li> Getting Started <ul> <li>Prerequisites</li> <li>Installation</li> </ul> </li> <li>Usage</li> <li>Roadmap</li> <li>Contributing</li> <li>License</li> <li>Contact</li> <li>Acknowledgments</li> </ol>"},{"location":"about/#about-the-project","title":"About The Project","text":"<p>Introducing LenoreShop, the ultimate shopping list app designed to streamline your grocery shopping experience. Whether you're managing a single shopping trip or juggling multiple stores, LenoreShop has you covered with its intuitive features and user-friendly interface.</p> <p>Key Features:</p> <ul> <li>Multiple Stores: Easily add as many stores as you frequent, ensuring all your favorite shopping destinations are covered.</li> <li>Unlimited Shopping Lists: Create and manage multiple shopping lists for each store, helping you stay organized and efficient.</li> <li>Customizable Aisles: Add aisles specific to each store and arrange them in the order you typically shop, making your trips faster and more convenient.</li> <li>Item Organization: Add items to your lists by aisle, so you never miss a thing and can quickly find what you need.</li> </ul> <p>Why Choose LenoreShop? LenoreShop is perfect for anyone who needs to shop, offering a tailored shopping experience that adapts to your personal preferences. With its seamless integration of Django for a robust backend and Vue for a sleek, responsive frontend, LenoreShop ensures a smooth and reliable user experience.</p> <p>Simplify your shopping routine with LenoreShop and enjoy the convenience of a perfectly organized shopping trip every time.</p> <p>(back to top)</p>"},{"location":"about/#built-with","title":"Built With","text":"<p>(back to top)</p>"},{"location":"about/#getting-started","title":"Getting Started","text":"<p>Welcome to LenoreShop! This guide will help you set up and run the application using Docker and Docker Compose.</p>"},{"location":"about/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following installed on your system:</p> <ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"about/#step-1-create-a-env-file","title":"Step 1: Create a <code>.env</code> File","text":"<p>Create a <code>.env</code> file in the root directory of the project. This file will store environment variables required to run the application. Below is an example of the variables you need to define:</p> <pre><code>DEBUG=0\nSECRET_KEY=mysupersecretkey\nDJANGO_ALLOWED_HOSTS=(docker-ip)\nCSRF_TRUSTED_ORIGINS=http://(docker-ip)\nSQL_ENGINE=django.db.backends.postgresql\nSQL_DATABASE=lenoreshop\nSQL_USER=lenoreshopuser\nSQL_PASSWORD=somepassword\nSQL_HOST=db\nSQL_PORT=5432\nDATABASE=postgres\nDJANGO_SUPERUSER_PASSWORD=suepervisorpassword\nDJANGO_SUPERUSER_EMAIL=someone@somewhere.com\nDJANGO_SUPERUSER_USERNAME=supervisor\n</code></pre> <p>Adjust these values according to your environment and application requirements.  Make sure to modify the DJANGO_ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS sections.</p>"},{"location":"about/#step-2-create-a-docker-composeyml-file","title":"Step 2: Create a <code>docker-compose.yml</code> File","text":"<p>Create a <code>docker-compose.yml</code> file in the root directory of the project. Below is an example configuration:</p> <pre><code>services:\n  frontend:\n    image: novanglus96/lenoreshop_frontend:latest\n    container_name: lenoreshop_frontend\n    networks:\n      - lenoreshop\n    restart: unless-stopped\n    expose:\n      - 80\n    env_file:\n      - ./.env\n  backend:\n    image: novanglus96/lenoreshop_backend:latest\n    container_name: lenoreshop_backend\n    command: /home/app/web/start.sh\n    volumes:\n      - static_volume:/home/app/web/staticfiles\n      - media_volume:/home/app/web/mediafiles\n    expose:\n      - 8000\n    depends_on:\n      - db\n    networks:\n      - lenoreshop\n    env_file:\n      - ./.env\n  db:\n    image: postgres:15\n    container_name: lenoreshop_db\n    volumes:\n      - postgres_data:/var/lib/postgresql/data/\n    env_file:\n      - ./.env\n    networks:\n      - lenoreshop\n  nginx:\n    image: novanglus96/lenoreapps_proxy:latest\n    container_name: lenoreshop_nginx\n    ports:\n      - \"8080:80\"\n    volumes:\n      - static_volume:/home/app/web/staticfiles\n      - media_volume:/home/app/web/mediafiles\n    depends_on:\n      - backend\n      - frontend\n    networks:\n      - lenoreshop\n\nnetworks:\n  lenoreshop:\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n</code></pre>"},{"location":"about/#step-3-run-the-application","title":"Step 3: Run the Application","text":"<ol> <li>Start the services:</li> </ol> <p><code>bash    docker compose up -d</code></p> <ol> <li>Access the application in your browser at <code>http://localhost:8080</code>.</li> </ol>"},{"location":"about/#notes","title":"Notes","text":"<ul> <li>Adjust exposed ports as needed for your environment.</li> <li>If you encounter any issues, ensure your <code>.env</code> file has the correct values and your Docker and Docker Compose installations are up to date.</li> </ul> <p>Enjoy using LenoreShop!</p> <p>(back to top)</p>"},{"location":"about/#usage","title":"Usage","text":"<p>(back to top)</p>"},{"location":"about/#roadmap","title":"Roadmap","text":"<p>See the open issues for a full list of proposed features (and known issues).</p> <p>(back to top)</p>"},{"location":"about/#contributing","title":"Contributing","text":"<p>Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are greatly appreciated.</p> <p>If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag \"enhancement\". Don't forget to give the project a star! Thanks again!</p> <ol> <li>Fork the Project</li> <li>Create your Feature Branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your Changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the Branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol> <p>(back to top)</p>"},{"location":"about/#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE.txt</code> for more information.</p> <p>(back to top)</p>"},{"location":"about/#support","title":"Support","text":"<p>Or</p> <p> </p>"},{"location":"about/#contact","title":"Contact","text":"<p>John Adams - Lenore.Apps@gmail.com</p> <p>Project Link: https://github.com/Novanglus96/LenoreShop</p> <p>(back to top)</p>"},{"location":"about/#acknowledgements","title":"Acknowledgements","text":"<p>A heartfelt thanks to our Patrons for their generous support! Your contributions help us maintain and improve this project.</p>"},{"location":"about/#thank-you-to-our-supporters","title":"\u2b50 Thank You to Our Supporters:","text":"<p>Want to see your name here? Support us on Patreon to join our amazing community and shape the future of LenoreShop!</p> <p>(back to top)</p>"},{"location":"api/","title":"API","text":""},{"location":"api/#dependencies","title":"Dependencies","text":""},{"location":"api/#views","title":"Views","text":""},{"location":"api/#backend.api.me","title":"<code>me(request)</code>","text":"<p>The function <code>me</code> returns a user.</p> Endpoint <ul> <li>Path: <code>/api/me</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <p>Returns:</p> Type Description <code>UserSchema</code> <p>Returns a user.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/me\", response=UserSchema)\ndef me(request):\n    \"\"\"\n    The function `me` returns a user.\n\n    Endpoint:\n        - **Path**: `/api/me`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n\n    Returns:\n        (UserSchema): Returns a user.\n    \"\"\"\n    return request.user\n</code></pre>"},{"location":"api/#schemas","title":"Schemas","text":""},{"location":"api/#backend.api.UserSchema","title":"<code>UserSchema</code>","text":"<p>Schema to validate a User</p> <p>Attributes:</p> Name Type Description <code>username</code> <code>str</code> <p>The user's username.</p> <code>is_authenticated</code> <code>bool</code> <p>Wether or not the use is authenticated.</p> <code>email</code> <code>str</code> <p>The user's email address.</p> <code>first_name</code> <code>str</code> <p>The user's first name.</p> <code>last_name</code> <code>str</code> <p>The user's last name.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class UserSchema(Schema):\n    \"\"\"\n    Schema to validate a User\n\n    Attributes:\n        username (str): The user's username.\n        is_authenticated (bool): Wether or not the use is authenticated.\n        email (str): The user's email address.\n        first_name (str): The user's first name.\n        last_name (str): The user's last name.\n    \"\"\"\n\n    username: str\n    is_authenticated: bool\n    email: str = None\n    first_name: str = None\n    last_name: str = None\n</code></pre>"},{"location":"api/#version","title":"Version","text":""},{"location":"api/#views_1","title":"Views","text":""},{"location":"api/#backend.api.list_version","title":"<code>list_version(request)</code>","text":"<p>The function <code>list_version</code> retrieves the app version number from the backend.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>HttpRequest</code> <p>The HTTP request object.</p> required <p>Returns:</p> Type Description <code>VersionOut</code> <p>a version object</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/version/list\", response=VersionOut)\ndef list_version(request):\n    \"\"\"\n    The function `list_version` retrieves the app version number\n    from the backend.\n\n    Args:\n        request (HttpRequest): The HTTP request object.\n\n    Returns:\n        (VersionOut): a version object\n    \"\"\"\n\n    try:\n        qs = get_object_or_404(Version, id=1)\n        return qs\n    except Exception as e:\n        raise HttpError(500, f\"Record retrieval error: {str(e)}\")\n</code></pre>"},{"location":"api/#schemas_1","title":"Schemas","text":""},{"location":"api/#backend.api.VersionOut","title":"<code>VersionOut</code>","text":"<p>Schema to represent a Version.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID integer. Unique.</p> <code>version_number</code> <code>str</code> <p>The version of the app.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class VersionOut(Schema):\n    \"\"\"\n    Schema to represent a Version.\n\n    Attributes:\n        id (int): ID integer. Unique.\n        version_number (str): The version of the app.\n    \"\"\"\n\n    id: int\n    version_number: str\n</code></pre>"},{"location":"api/#aisle","title":"Aisle","text":""},{"location":"api/#views_2","title":"Views","text":""},{"location":"api/#backend.api.create_aisle","title":"<code>create_aisle(request, payload)</code>","text":"<p>The function <code>create_aisle</code> creates an Aisle.</p> Endpoint <ul> <li>Path: <code>/api/aisles</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>AisleIn</code> <p>An object using schema of AisleIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created Aisle.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/aisles\")\ndef create_aisle(request, payload: AisleIn):\n    \"\"\"\n    The function `create_aisle` creates an Aisle.\n\n    Endpoint:\n        - **Path**: `/api/aisles`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (AisleIn): An object using schema of AisleIn.\n\n    Returns:\n        id (int): returns the id of the created Aisle.\n    \"\"\"\n    aisle = Aisle.objects.create(**payload.dict())\n    return {\"id\": aisle.id}\n</code></pre>"},{"location":"api/#backend.api.get_aisle","title":"<code>get_aisle(request, aisle_id)</code>","text":"<p>The function <code>get_aisle</code> returns an Aisle.</p> Endpoint <ul> <li>Path: <code>/api/aisles/{aisle_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>aisle_id</code> <code>int</code> <p>An ID of an Aisle.</p> required <p>Returns:</p> Type Description <code>AisleOut</code> <p>returns the Aisle object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/aisles/{aisle_id}\", response=AisleOut)\ndef get_aisle(request, aisle_id: int):\n    \"\"\"\n    The function `get_aisle` returns an Aisle.\n\n    Endpoint:\n        - **Path**: `/api/aisles/{aisle_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        aisle_id (int): An ID of an Aisle.\n\n    Returns:\n        (AisleOut): returns the Aisle object.\n    \"\"\"\n    aisle = get_object_or_404(Aisle, id=aisle_id)\n    return aisle\n</code></pre>"},{"location":"api/#backend.api.list_aisles","title":"<code>list_aisles(request)</code>","text":"<p>The function <code>list_aisles</code> returns a list of Aisles.</p> Endpoint <ul> <li>Path: <code>/api/aisles</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <p>Returns:</p> Type Description <code>List[AisleOut]</code> <p>returns a list of Aisle objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/aisles\", response=List[AisleOut])\ndef list_aisles(request):\n    \"\"\"\n    The function `list_aisles` returns a list of Aisles.\n\n    Endpoint:\n        - **Path**: `/api/aisles`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n\n    Returns:\n        (List[AisleOut]): returns a list of Aisle objects.\n    \"\"\"\n    qs = Aisle.objects.all()\n    return qs\n</code></pre>"},{"location":"api/#backend.api.list_aislesbystore","title":"<code>list_aislesbystore(request, store_id)</code>","text":"<p>The function <code>list_aislesbystore</code> returns a list of Aisles for a matching store ID.</p> Endpoint <ul> <li>Path: <code>/api/aislesbystore/{store_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>store_id</code> <code>int</code> <p>An ID of a Store.</p> required <p>Returns:</p> Type Description <code>List[AisleOut]</code> <p>Returns a list of Aisles.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/aislesbystore/{store_id}\", response=List[AisleOut])\ndef list_aislesbystore(request, store_id: int):\n    \"\"\"\n    The function `list_aislesbystore` returns a list of Aisles for a matching\n    store ID.\n\n    Endpoint:\n        - **Path**: `/api/aislesbystore/{store_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        store_id (int): An ID of a Store.\n\n    Returns:\n        (List[AisleOut]): Returns a list of Aisles.\n    \"\"\"\n    qs = Aisle.objects.all().filter(store__id=store_id).order_by(\"order\")\n    return qs\n</code></pre>"},{"location":"api/#backend.api.update_aisle","title":"<code>update_aisle(request, aisle_id, payload)</code>","text":"<p>The function <code>update_aisle</code> updates an Aisle</p> Endpoint <ul> <li>Path: <code>/api/aisles/{aisle_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>aisle_id</code> <code>int</code> <p>The ID of an aisle object.</p> required <code>payload</code> <code>AisleIn</code> <p>An Aisle object.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully updated.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/aisles/{aisle_id}\")\ndef update_aisle(request, aisle_id: int, payload: AisleIn):\n    \"\"\"\n    The function `update_aisle` updates an Aisle\n\n    Endpoint:\n        - **Path**: `/api/aisles/{aisle_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request ():\n        aisle_id (int): The ID of an aisle object.\n        payload (AisleIn): An Aisle object.\n\n    Returns:\n        success (bool): True if successfully updated.\n    \"\"\"\n    aisle = get_object_or_404(Aisle, id=aisle_id)\n    aisle.name = payload.name\n    aisle.order = payload.order\n    aisle.store_id = payload.store_id\n    aisle.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_aisle","title":"<code>delete_aisle(request, aisle_id)</code>","text":"<p>The function <code>delete_aisle</code> deletes a given Aisle.</p> Endpoint <ul> <li>Path: <code>/api/aisles/{aisle_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>aisle_id</code> <code>int</code> <p>ID of an Aisle to delete.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully deleted.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/aisles/{aisle_id}\")\ndef delete_aisle(request, aisle_id: int):\n    \"\"\"\n    The function `delete_aisle` deletes a given Aisle.\n\n    Endpoint:\n        - **Path**: `/api/aisles/{aisle_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request ():\n        aisle_id (int): ID of an Aisle to delete.\n\n    Returns:\n        success (bool): True if successfully deleted.\n    \"\"\"\n    aisle = get_object_or_404(Aisle, id=aisle_id)\n    aisle.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_2","title":"Schemas","text":""},{"location":"api/#backend.api.AisleIn","title":"<code>AisleIn</code>","text":"<p>Schema to validate an Aisle.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the aisle.</p> <code>order</code> <code>int</code> <p>The order of the aisle. Default = 1.</p> <code>store_id</code> <code>int</code> <p>The ID of a Store object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class AisleIn(Schema):\n    \"\"\"\n    Schema to validate an Aisle.\n\n    Attributes:\n        name (str): The name of the aisle.\n        order (int): The order of the aisle. Default = 1.\n        store_id (int): The ID of a Store object.\n    \"\"\"\n\n    name: str\n    order: int = 1\n    store_id: int\n</code></pre>"},{"location":"api/#backend.api.AisleOut","title":"<code>AisleOut</code>","text":"<p>Schema to represent an Aisle.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID integer. Unique.</p> <code>name</code> <code>str</code> <p>The name of the Aisle.</p> <code>order</code> <code>int</code> <p>The order of the Aisle. Default = 1.</p> <code>store_id</code> <code>int</code> <p>The ID of the store.</p> <code>store</code> <code>StoreOut</code> <p>The Store object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class AisleOut(Schema):\n    \"\"\"\n    Schema to represent an Aisle.\n\n    Attributes:\n        id (int): ID integer. Unique.\n        name (str): The name of the Aisle.\n        order (int): The order of the Aisle. Default = 1.\n        store_id (int): The ID of the store.\n        store (StoreOut): The Store object.\n    \"\"\"\n\n    id: int\n    name: str\n    order: int = 1\n    store_id: int\n    store: StoreOut\n</code></pre>"},{"location":"api/#backend.api.AislesWithItems","title":"<code>AislesWithItems</code>","text":"<p>Schema to represent an Aisle with ListItems assigned to it.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the aisle.</p> <code>name</code> <code>str</code> <p>The name of the aisle.</p> <code>order</code> <code>int</code> <p>The order of the aisle.</p> <code>store_id</code> <code>int</code> <p>The id of the store this aisle is in.</p> <code>listitems</code> <code>List[ListItemOut]</code> <p>A list of list items in this aisle.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class AislesWithItems(Schema):\n    \"\"\"\n    Schema to represent an Aisle with ListItems assigned to it.\n\n    Attributes:\n        id (int): ID of the aisle.\n        name (str): The name of the aisle.\n        order (int): The order of the aisle.\n        store_id (int): The id of the store this aisle is in.\n        listitems (List[ListItemOut]): A list of list items in this aisle.\n    \"\"\"\n\n    id: int\n    name: str\n    order: int = 1\n    store_id: int\n    listitems: List[ListItemOut]\n</code></pre>"},{"location":"api/#store","title":"Store","text":""},{"location":"api/#views_3","title":"Views","text":""},{"location":"api/#backend.api.create_store","title":"<code>create_store(request, payload)</code>","text":"<p>The function <code>create_store</code> creates a Store.</p> Endpoint <ul> <li>Path: <code>/api/stores</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>StoreIn</code> <p>A Store object to add.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the added Store.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/stores\")\ndef create_store(request, payload: StoreIn):\n    \"\"\"\n    The function `create_store` creates a Store.\n\n    Endpoint:\n        - **Path**: `/api/stores`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (StoreIn): A Store object to add.\n\n    Returns:\n        id (int): The ID of the added Store.\n    \"\"\"\n    store = Store.objects.create(**payload.dict())\n    return {\"id\": store.id}\n</code></pre>"},{"location":"api/#backend.api.get_store","title":"<code>get_store(request, store_id)</code>","text":"<p>The function <code>get_store</code> returns a Store object for a given ID.</p> Endpoint <ul> <li>Path: <code>/api/stores/{store_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>store_id</code> <code>int</code> <p>ID of a Store to retreive.</p> required <p>Returns:</p> Type Description <code>StoreOut</code> <p>A Store object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/stores/{store_id}\", response=StoreOut)\ndef get_store(request, store_id: int):\n    \"\"\"\n    The function `get_store` returns a Store object for a given ID.\n\n    Endpoint:\n        - **Path**: `/api/stores/{store_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        store_id (int): ID of a Store to retreive.\n\n    Returns:\n        (StoreOut): A Store object.\n    \"\"\"\n    store = get_object_or_404(Store, id=store_id)\n    return store\n</code></pre>"},{"location":"api/#backend.api.list_stores","title":"<code>list_stores(request)</code>","text":"<p>The function <code>list_stores</code> returns a list of Stores.</p> Endpoint <ul> <li>Path: <code>/api/stores</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <p>Returns:</p> Type Description <code>List[StoreOut]</code> <p>A list of Store objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/stores\", response=List[StoreOut])\ndef list_stores(request):\n    \"\"\"\n    The function `list_stores` returns a list of Stores.\n\n    Endpoint:\n        - **Path**: `/api/stores`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n\n    Returns:\n        (List[StoreOut]): A list of Store objects.\n    \"\"\"\n    qs = Store.objects.all()\n    return qs\n</code></pre>"},{"location":"api/#backend.api.update_store","title":"<code>update_store(request, store_id, payload)</code>","text":"<p>The function <code>update_store</code> updates a give Store.</p> Endpoint <ul> <li>Path: <code>/api/stores/{store_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>store_id</code> <code>int</code> <p>ID of a Store to update.</p> required <code>payload</code> <code>StoreIn</code> <p>A Store object with updates.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully updated.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/stores/{store_id}\")\ndef update_store(request, store_id: int, payload: StoreIn):\n    \"\"\"\n    The function `update_store` updates a give Store.\n\n    Endpoint:\n        - **Path**: `/api/stores/{store_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request ():\n        store_id (int): ID of a Store to update.\n        payload (StoreIn): A Store object with updates.\n\n    Returns:\n        success (bool): True if successfully updated.\n    \"\"\"\n    store = get_object_or_404(Store, id=store_id)\n    store.name = payload.name\n    store.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_store","title":"<code>delete_store(request, store_id)</code>","text":"<p>The function <code>delete_store</code> deletes a given Store.</p> Endpoint <ul> <li>Path: <code>/api/stores/{store_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>store_id</code> <code>int</code> <p>ID of a Store to delete.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully deleted.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/stores/{store_id}\")\ndef delete_store(request, store_id: int):\n    \"\"\"\n    The function `delete_store` deletes a given Store.\n\n    Endpoint:\n        - **Path**: `/api/stores/{store_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request ():\n        store_id (int): ID of a Store to delete.\n\n    Returns:\n        success (bool): True if successfully deleted.\n    \"\"\"\n    store = get_object_or_404(Store, id=store_id)\n    store.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_3","title":"Schemas","text":""},{"location":"api/#backend.api.StoreIn","title":"<code>StoreIn</code>","text":"<p>Schema to validate a Store.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the store.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class StoreIn(Schema):\n    \"\"\"\n    Schema to validate a Store.\n\n    Attributes:\n        name (str): The name of the store.\n    \"\"\"\n\n    name: str\n</code></pre>"},{"location":"api/#backend.api.StoreOut","title":"<code>StoreOut</code>","text":"<p>Schema to represent a Store.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID integer. Unique.</p> <code>name</code> <code>str</code> <p>The name of the store.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class StoreOut(Schema):\n    \"\"\"\n    Schema to represent a Store.\n\n    Attributes:\n        id (int): ID integer. Unique.\n        name (str): The name of the store.\n    \"\"\"\n\n    id: int\n    name: str\n</code></pre>"},{"location":"api/#item","title":"Item","text":""},{"location":"api/#views_4","title":"Views","text":""},{"location":"api/#backend.api.create_item","title":"<code>create_item(request, payload)</code>","text":"<p>The function <code>create_item</code> creates an Item.</p> Endpoint <ul> <li>Path: <code>/api/items</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>ItemIn</code> <p>An object using schema of ItemIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created Item.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/items\", response=ItemOut)\ndef create_item(request, payload: ItemIn):\n    \"\"\"\n    The function `create_item` creates an Item.\n\n    Endpoint:\n        - **Path**: `/api/items`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (ItemIn): An object using schema of ItemIn.\n\n    Returns:\n        id (int): returns the id of the created Item.\n    \"\"\"\n    item = Item.objects.create(**payload.dict())\n    return item\n</code></pre>"},{"location":"api/#backend.api.get_item","title":"<code>get_item(request, item_id)</code>","text":"<p>The function <code>get_item</code> returns an Item.</p> Endpoint <ul> <li>Path: <code>/api/items/{item_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>item_id</code> <code>int</code> <p>The ID of an Item.</p> required <p>Returns:</p> Type Description <code>ItemOut</code> <p>returns an Item object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/items/{item_id}\", response=ItemOut)\ndef get_item(request, item_id: int):\n    \"\"\"\n    The function `get_item` returns an Item.\n\n    Endpoint:\n        - **Path**: `/api/items/{item_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        item_id (int): The ID of an Item.\n\n    Returns:\n        (ItemOut): returns an Item object.\n    \"\"\"\n    item = get_object_or_404(Item, id=item_id)\n    return item\n</code></pre>"},{"location":"api/#backend.api.list_items","title":"<code>list_items(request, page=Query(1), page_size=Query(15), full=Query(False))</code>","text":"<p>The function <code>list_items</code> returns a paginated list of Items.</p> Endpoint <ul> <li>Path: <code>/api/items</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>page</code> <code>int</code> <p>The page number to return. Optional. Default = 1.</p> <code>Query(1)</code> <code>page_size</code> <code>int</code> <p>Hoe many items per page. Optional. Default = 15.</p> <code>Query(15)</code> <code>full</code> <code>bool</code> <p>Wehter this is a full request or not. Optional. Default = False.</p> <code>Query(False)</code> <p>Returns:</p> Type Description <code>PaginatedItems</code> <p>returns a PaginatedItems object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/items\", response=PaginatedItems)\ndef list_items(\n    request,\n    page: Optional[int] = Query(1),\n    page_size: Optional[int] = Query(15),\n    full: Optional[bool] = Query(False),\n):\n    \"\"\"\n    The function `list_items` returns a paginated list of Items.\n\n    Endpoint:\n        - **Path**: `/api/items`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        page (int): The page number to return. Optional. Default = 1.\n        page_size (int): Hoe many items per page. Optional. Default = 15.\n        full (bool): Wehter this is a full request or not. Optional. Default = False.\n\n    Returns:\n        (PaginatedItems): returns a PaginatedItems object.\n    \"\"\"\n    qs = Item.objects.all().order_by(\"name\")\n    total_pages = 0\n    item_list = []\n    if not full:\n        if len(qs) &gt; 0:\n            paginator = Paginator(qs, page_size)\n            page_obj = paginator.page(page)\n            item_list = list(page_obj.object_list)\n            total_pages = paginator.num_pages\n    else:\n        item_list = list(qs)\n    total_records = len(qs)\n    paginated_items = PaginatedItems(\n        items=item_list,\n        current_page=page,\n        total_pages=total_pages,\n        total_records=total_records,\n    )\n    return paginated_items\n</code></pre>"},{"location":"api/#backend.api.update_item","title":"<code>update_item(request, item_id, payload)</code>","text":"<p>The function <code>update_item</code> updates an Item.</p> Endpoint <ul> <li>Path: <code>/api/items/{item_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>item_id</code> <code>int</code> <p>ID of the item to update.</p> required <code>payload</code> <code>ItemIn</code> <p>An Item object with updates.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully updated.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/items/{item_id}\")\ndef update_item(request, item_id: int, payload: ItemIn):\n    \"\"\"\n    The function `update_item` updates an Item.\n\n    Endpoint:\n        - **Path**: `/api/items/{item_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request ():\n        item_id (int): ID of the item to update.\n        payload (ItemIn): An Item object with updates.\n\n    Returns:\n        success (bool): True if successfully updated.\n    \"\"\"\n    item = get_object_or_404(Item, id=item_id)\n    item.name = payload.name\n    item.matches = payload.matches\n    item.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_item","title":"<code>delete_item(request, item_id)</code>","text":"<p>The function <code>delete_item</code> deletes a given Item.</p> Endpoint <ul> <li>Path: <code>/api/items/{item_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>item_id</code> <code>int</code> <p>ID of an Item to delete.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully deleted.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/items/{item_id}\")\ndef delete_item(request, item_id: int):\n    \"\"\"\n    The function `delete_item` deletes a given Item.\n\n    Endpoint:\n        - **Path**: `/api/items/{item_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request ():\n        item_id (int): ID of an Item to delete.\n\n    Returns:\n        success (bool): True if successfully deleted.\n    \"\"\"\n    item = get_object_or_404(Item, id=item_id)\n    item.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_4","title":"Schemas","text":""},{"location":"api/#backend.api.ItemIn","title":"<code>ItemIn</code>","text":"<p>Schema to validate an Item.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the item.</p> <code>matches</code> <code>str</code> <p>Names that match this item.</p> <code>aisle</code> <code>AisleOut</code> <p>Last aisle used for this item.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ItemIn(Schema):\n    \"\"\"\n    Schema to validate an Item.\n\n    Attributes:\n        name (str): The name of the item.\n        matches (str): Names that match this item.\n        aisle (AisleOut): Last aisle used for this item.\n    \"\"\"\n\n    name: str\n    matches: str = None\n    aisle: Optional[AisleOut]\n</code></pre>"},{"location":"api/#backend.api.ItemOut","title":"<code>ItemOut</code>","text":"<p>Schema to represent an Item.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID integer. Unique.</p> <code>name</code> <code>str</code> <p>The name of the item.</p> <code>matches</code> <code>str</code> <p>Names that macth this item.</p> <code>aisle</code> <code>AisleOut</code> <p>Last aisle used for this item. Optional.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ItemOut(Schema):\n    \"\"\"\n    Schema to represent an Item.\n\n    Attributes:\n        id (int): ID integer. Unique.\n        name (str): The name of the item.\n        matches (str): Names that macth this item.\n        aisle (AisleOut): Last aisle used for this item. Optional.\n    \"\"\"\n\n    id: int\n    name: str\n    matches: str = None\n    aisle: Optional[AisleOut]\n</code></pre>"},{"location":"api/#backend.api.PaginatedItems","title":"<code>PaginatedItems</code>","text":"<p>Schema to represent a paginated list of Items.</p> <p>Attributes:</p> Name Type Description <code>items</code> <code>List[ItemOut]</code> <p>A paginated list of items.</p> <code>current_page</code> <code>int</code> <p>The current page of the list.</p> <code>total_pages</code> <code>int</code> <p>The total number of pages of items.</p> <code>total_records</code> <code>int</code> <p>The total count of items.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class PaginatedItems(Schema):\n    \"\"\"\n    Schema to represent a paginated list of Items.\n\n    Attributes:\n        items (List[ItemOut]): A paginated list of items.\n        current_page (int): The current page of the list.\n        total_pages (int): The total number of pages of items.\n        total_records (int): The total count of items.\n    \"\"\"\n\n    items: List[ItemOut]\n    current_page: int\n    total_pages: int\n    total_records: int\n</code></pre>"},{"location":"api/#listitem","title":"ListItem","text":""},{"location":"api/#views_5","title":"Views","text":""},{"location":"api/#backend.api.create_listitem","title":"<code>create_listitem(request, payload)</code>","text":"<p>The function <code>create_listitem</code> creates a ListItem.</p> Endpoint <ul> <li>Path: <code>/api/listitems</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>ListItemIn</code> <p>An object using schema of ListItemIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created ListItem.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/listitems\")\ndef create_listitem(request, payload: ListItemIn):\n    \"\"\"\n    The function `create_listitem` creates a ListItem.\n\n    Endpoint:\n        - **Path**: `/api/listitems`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (ListItemIn): An object using schema of ListItemIn.\n\n    Returns:\n        id (int): returns the id of the created ListItem.\n    \"\"\"\n    existing_item = ListItem.objects.filter(\n        shopping_list_id=payload.shopping_list_id, item_id=payload.item_id\n    ).first()\n    if existing_item is None:\n        listitem = ListItem.objects.create(**payload.dict())\n        item = Item.objects.get(id=payload.item_id)\n        item.aisle_id = payload.aisle_id\n        item.save()\n        return {\"id\": listitem.id}\n    else:\n        existing_item.qty += payload.qty\n        existing_item.purchased = False\n        existing_item.save()\n        return {\"id\": existing_item.id}\n</code></pre>"},{"location":"api/#backend.api.get_listitem","title":"<code>get_listitem(request, listitem_id)</code>","text":"<p>The function <code>get_listitem</code> returns a ListItem</p> Endpoint <ul> <li>Path: <code>/api/listitems/{listitem_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>listitem_id</code> <code>int</code> <p>The ID of a ListItem.</p> required <p>Returns:</p> Type Description <code>ListItemOut</code> <p>returns a ListItem object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/listitems/{listitem_id}\", response=ListItemOut)\ndef get_listitem(request, listitem_id: int):\n    \"\"\"\n    The function `get_listitem` returns a ListItem\n\n    Endpoint:\n        - **Path**: `/api/listitems/{listitem_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        listitem_id (int): The ID of a ListItem.\n\n    Returns:\n        (ListItemOut): returns a ListItem object.\n    \"\"\"\n    listitem = get_object_or_404(ListItem, id=listitem_id)\n    return listitem\n</code></pre>"},{"location":"api/#backend.api.list_listitems","title":"<code>list_listitems(request)</code>","text":"<p>The function <code>list_listitems</code> returns a list of ListItems.</p> Endpoint <ul> <li>Path: <code>/api/listitems</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <p>Returns:</p> Type Description <code>List[ListItemOut]</code> <p>Returns a list of ListItem objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/listitems\", response=List[ListItemOut])\ndef list_listitems(request):\n    \"\"\"\n    The function `list_listitems` returns a list of ListItems.\n\n    Endpoint:\n        - **Path**: `/api/listitems`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n\n    Returns:\n        (List[ListItemOut]): Returns a list of ListItem objects.\n    \"\"\"\n    qs = ListItem.objects.all()\n    return qs\n</code></pre>"},{"location":"api/#backend.api.update_listitem","title":"<code>update_listitem(request, listitem_id, payload)</code>","text":"<p>The function <code>update_listitem</code> updates a ListItem.</p> Endpoint <ul> <li>Path: <code>/api/listitems/{listitem_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>listitem_id</code> <code>int</code> <p>The ID of a ListItem to update.</p> required <code>payload</code> <code>ListItemIn</code> <p>A ListItem object with updates.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully updated.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/listitems/{listitem_id}\")\ndef update_listitem(request, listitem_id: int, payload: ListItemIn):\n    \"\"\"\n    The function `update_listitem` updates a ListItem.\n\n    Endpoint:\n        - **Path**: `/api/listitems/{listitem_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request ():\n        listitem_id (int): The ID of a ListItem to update.\n        payload (ListItemIn): A ListItem object with updates.\n\n    Returns:\n        success (bool): True if successfully updated.\n    \"\"\"\n    listitem = get_object_or_404(ListItem, id=listitem_id)\n    listitem.qty = payload.qty\n    listitem.purchased = payload.purchased\n    listitem.notes = payload.notes\n    listitem.purch_date = payload.purch_date\n    listitem.item_id = payload.item_id\n    listitem.aisle_id = payload.aisle_id\n    listitem.shopping_list_id = payload.shopping_list_id\n    listitem.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_listitem","title":"<code>delete_listitem(request, listitem_id)</code>","text":"<p>The function <code>delete_listitem</code> deletes a given ListItem.</p> Endpoint <ul> <li>Path: <code>/api/listitems/{listitem_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>listitem_id</code> <code>int</code> <p>ID of an ListItem to delete.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully deleted.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/listitems/{listitem_id}\")\ndef delete_listitem(request, listitem_id: int):\n    \"\"\"\n    The function `delete_listitem` deletes a given ListItem.\n\n    Endpoint:\n        - **Path**: `/api/listitems/{listitem_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request ():\n        listitem_id (int): ID of an ListItem to delete.\n\n    Returns:\n        success (bool): True if successfully deleted.\n    \"\"\"\n    listitem = get_object_or_404(ListItem, id=listitem_id)\n    listitem.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_listitems_by_shoppinglist","title":"<code>delete_listitems_by_shoppinglist(request, shoppinglist_id)</code>","text":"<p>The function <code>delete_listitems_by_shoppinglist</code> deletes all ListItems for a given ShoppingList ID.</p> Endpoint <ul> <li>Path: <code>/api/listitems/deleteall/{shoppinglist_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>shoppinglist_id</code> <code>int</code> <p>ID of a ShoppingList.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully deleted.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/listitems/deleteall/{shoppinglist_id}\")\ndef delete_listitems_by_shoppinglist(request, shoppinglist_id: int):\n    \"\"\"\n    The function `delete_listitems_by_shoppinglist` deletes all ListItems for\n    a given ShoppingList ID.\n\n    Endpoint:\n        - **Path**: `/api/listitems/deleteall/{shoppinglist_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request ():\n        shoppinglist_id (int): ID of a ShoppingList.\n\n    Returns:\n        success (bool): True if successfully deleted.\n    \"\"\"\n    listitems = ListItem.objects.filter(shopping_list_id=shoppinglist_id)\n    listitems.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_purchased_listitems_by_shoppinglist","title":"<code>delete_purchased_listitems_by_shoppinglist(request, shoppinglist_id)</code>","text":"<p>The function <code>delete_purchased_listitems_by_shoppinglist</code> deletes all ListItems markded as purchased on a given ShoppingList.</p> Endpoint <ul> <li>Path: <code>/api/listitems/deletepurchased/{shoppinglist_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>shoppinglist_id</code> <code>int</code> <p>ID of a ShoppingList.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully deleted.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/listitems/deletepurchased/{shoppinglist_id}\")\ndef delete_purchased_listitems_by_shoppinglist(request, shoppinglist_id: int):\n    \"\"\"\n    The function `delete_purchased_listitems_by_shoppinglist` deletes all ListItems\n    markded as purchased on a given ShoppingList.\n\n    Endpoint:\n        - **Path**: `/api/listitems/deletepurchased/{shoppinglist_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request ():\n        shoppinglist_id (int): ID of a ShoppingList.\n\n    Returns:\n        success (bool): True if successfully deleted.\n    \"\"\"\n    listitems = ListItem.objects.filter(\n        shopping_list_id=shoppinglist_id, purchased=True\n    )\n    listitems.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_5","title":"Schemas","text":""},{"location":"api/#backend.api.ListItemIn","title":"<code>ListItemIn</code>","text":"<p>Schema to validate a ListItem.</p> <p>Attributes:</p> Name Type Description <code>qty</code> <code>int</code> <p>The quantity of list items. Default = 1.</p> <code>purchased</code> <code>bool</code> <p>Wether the list item has been purchsaed. Default = False.</p> <code>notes</code> <code>str</code> <p>Notes for the list item. Default = None.</p> <code>purch_date</code> <code>date</code> <p>Last aisle used for this item. Default = None.</p> <code>item_id</code> <code>int</code> <p>ID of the item.</p> <code>aisle_id</code> <code>int</code> <p>ID of the aisle.</p> <code>shopping_list_id</code> <code>int</code> <p>ID of the shopping list.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ListItemIn(Schema):\n    \"\"\"\n    Schema to validate a ListItem.\n\n    Attributes:\n        qty (int): The quantity of list items. Default = 1.\n        purchased (bool): Wether the list item has been purchsaed. Default = False.\n        notes (str): Notes for the list item. Default = None.\n        purch_date (date): Last aisle used for this item. Default = None.\n        item_id (int): ID of the item.\n        aisle_id (int): ID of the aisle.\n        shopping_list_id (int): ID of the shopping list.\n    \"\"\"\n\n    qty: int = 1\n    purchased: bool = False\n    notes: str = None\n    purch_date: date = None\n    item_id: int\n    aisle_id: int\n    shopping_list_id: int\n</code></pre>"},{"location":"api/#backend.api.ListItemOut","title":"<code>ListItemOut</code>","text":"<p>Schema to represent a ListItem.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The ID of the list item.</p> <code>qty</code> <code>int</code> <p>The quantity of list items. Default = 1.</p> <code>purchased</code> <code>bool</code> <p>Wether the list item has been purchsaed. Default = False.</p> <code>notes</code> <code>str</code> <p>Notes for the list item. Default = None.</p> <code>purch_date</code> <code>date</code> <p>Last aisle used for this item. Default = None.</p> <code>item_id</code> <code>int</code> <p>ID of the item.</p> <code>aisle_id</code> <code>int</code> <p>ID of the aisle.</p> <code>shopping_list_id</code> <code>int</code> <p>ID of the shopping list.</p> <code>item</code> <code>ItemOut</code> <p>Object representing the item for the list item.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ListItemOut(Schema):\n    \"\"\"\n    Schema to represent a ListItem.\n\n    Attributes:\n        id (int): The ID of the list item.\n        qty (int): The quantity of list items. Default = 1.\n        purchased (bool): Wether the list item has been purchsaed. Default = False.\n        notes (str): Notes for the list item. Default = None.\n        purch_date (date): Last aisle used for this item. Default = None.\n        item_id (int): ID of the item.\n        aisle_id (int): ID of the aisle.\n        shopping_list_id (int): ID of the shopping list.\n        item (ItemOut): Object representing the item for the list item.\n    \"\"\"\n\n    id: int\n    qty: int = 1\n    purchased: bool = False\n    notes: str = None\n    purch_date: date = None\n    item_id: int\n    aisle_id: int\n    shopping_list_id: int\n    item: ItemOut\n</code></pre>"},{"location":"api/#shopping-list","title":"Shopping List","text":""},{"location":"api/#views_6","title":"Views","text":""},{"location":"api/#backend.api.create_shoppinglist","title":"<code>create_shoppinglist(request, payload)</code>","text":"<p>The function <code>create_shoppinglist</code> creates a ShoppingList.</p> Endpoint <ul> <li>Path: <code>/api/shoppinglists</code></li> <li>Method: <code>POST</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>payload</code> <code>ShoppingListIn</code> <p>An object using schema of ShoppingListIn.</p> required <p>Returns:</p> Name Type Description <code>id</code> <code>int</code> <p>returns the id of the created ShoppingList.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.post(\"/shoppinglists\")\ndef create_shoppinglist(request, payload: ShoppingListIn):\n    \"\"\"\n    The function `create_shoppinglist` creates a ShoppingList.\n\n    Endpoint:\n        - **Path**: `/api/shoppinglists`\n        - **Method**: `POST`\n\n    Args:\n        request ():\n        payload (ShoppingListIn): An object using schema of ShoppingListIn.\n\n    Returns:\n        id (int): returns the id of the created ShoppingList.\n    \"\"\"\n    shoppinglist = ShoppingList.objects.create(**payload.dict())\n    return {\"id\": shoppinglist.id}\n</code></pre>"},{"location":"api/#backend.api.get_shoppinglist","title":"<code>get_shoppinglist(request, shoppinglist_id)</code>","text":"<p>The function <code>get_shoppinglist</code> returns a ShoppingList.</p> Endpoint <ul> <li>Path: <code>/api/shoppinglists/{shoppinglist_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>shoppinglist_id</code> <code>int</code> <p>An ID of a ShoppingList.</p> required <p>Returns:</p> Type Description <code>ShoppingListOut</code> <p>returns a ShoppingList object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/shoppinglists/{shoppinglist_id}\", response=ShoppingListOut)\ndef get_shoppinglist(request, shoppinglist_id: int):\n    \"\"\"\n    The function `get_shoppinglist` returns a ShoppingList.\n\n    Endpoint:\n        - **Path**: `/api/shoppinglists/{shoppinglist_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        shoppinglist_id (int): An ID of a ShoppingList.\n\n    Returns:\n        (ShoppingListOut): returns a ShoppingList object.\n    \"\"\"\n    shoppinglist = get_object_or_404(ShoppingList, id=shoppinglist_id)\n    return shoppinglist\n</code></pre>"},{"location":"api/#backend.api.get_shoppinglistfull","title":"<code>get_shoppinglistfull(request, shoppinglist_id)</code>","text":"<p>The function <code>get_shoppinglistfull</code> returns a ShoppingList with aisles and items.</p> Endpoint <ul> <li>Path: <code>/api/shoppinglistfull/{shoppinglist_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>shoppinglist_id</code> <code>int</code> <p>The ID of a ShoppingList.</p> required <p>Returns:</p> Type Description <code>ShoppingListFull</code> <p>returns a ShoppingListFull object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/shoppinglistfull/{shoppinglist_id}\", response=ShoppingListFull)\ndef get_shoppinglistfull(request, shoppinglist_id: int):\n    \"\"\"\n    The function `get_shoppinglistfull` returns a ShoppingList with aisles and items.\n\n    Endpoint:\n        - **Path**: `/api/shoppinglistfull/{shoppinglist_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        shoppinglist_id (int): The ID of a ShoppingList.\n\n    Returns:\n        (ShoppingListFull): returns a ShoppingListFull object.\n    \"\"\"\n    shoppinglist = get_object_or_404(ShoppingList, id=shoppinglist_id)\n    store = shoppinglist.store\n    aisles = Aisle.objects.filter(\n        store=store,\n        listitem__shopping_list=shoppinglist,\n        listitem__purchased=False,\n    ).order_by(\"order\", \"name\")\n    purchasedaisles = Aisle.objects.filter(\n        store=store,\n        listitem__shopping_list=shoppinglist,\n        listitem__purchased=True,\n    ).order_by(\"order\", \"name\")\n    aisles_dict = {\n        aisle.id: AislesWithItems(\n            id=aisle.id,\n            name=aisle.name,\n            order=aisle.order,\n            store_id=store.id,\n            listitems=[],\n        )\n        for aisle in aisles\n    }\n    purchased_aisles_dict = {\n        aisle.id: AislesWithItems(\n            id=aisle.id,\n            name=aisle.name,\n            order=aisle.order,\n            store_id=store.id,\n            listitems=[],\n        )\n        for aisle in purchasedaisles\n    }\n    listitems = ListItem.objects.filter(\n        shopping_list=shoppinglist, purchased=False\n    ).order_by(\"purchased\", \"item__name\")\n    purchasedlistitems = ListItem.objects.filter(\n        shopping_list=shoppinglist, purchased=True\n    ).order_by(\"purchased\", \"item__name\")\n    total_purchased_count = ListItem.objects.filter(\n        shopping_list=shoppinglist, purchased=True\n    ).count()\n    total_items_count = (\n        ListItem.objects.filter(shopping_list=shoppinglist)\n        .order_by(\"purchased\", \"item__name\")\n        .count()\n    )\n\n    for listitem in listitems:\n        aisles_dict[listitem.aisle.id].listitems.append(\n            ListItemOut(\n                id=listitem.id,\n                qty=listitem.qty,\n                purchased=listitem.purchased,\n                notes=listitem.notes,\n                purch_date=listitem.purch_date,\n                item_id=listitem.item.id,\n                aisle_id=listitem.aisle_id,\n                shopping_list_id=listitem.shopping_list.id,\n                item=ItemOut(\n                    id=listitem.item.id,\n                    name=listitem.item.name,\n                    matches=listitem.item.matches,\n                ),\n            )\n        )\n\n    for listitem in purchasedlistitems:\n        purchased_aisles_dict[listitem.aisle.id].listitems.append(\n            ListItemOut(\n                id=listitem.id,\n                qty=listitem.qty,\n                purchased=listitem.purchased,\n                notes=listitem.notes,\n                purch_date=listitem.purch_date,\n                item_id=listitem.item.id,\n                aisle_id=listitem.aisle_id,\n                shopping_list_id=listitem.shopping_list.id,\n                item=ItemOut(\n                    id=listitem.item.id,\n                    name=listitem.item.name,\n                    matches=listitem.item.matches,\n                ),\n            )\n        )\n\n    response_data = ShoppingListFull(\n        id=shoppinglist.id,\n        name=shoppinglist.name,\n        store_id=store.id,\n        store=StoreOut(id=store.id, name=store.name),\n        aisles=list(aisles_dict.values()),\n        purchased_aisles=list(purchased_aisles_dict.values()),\n        totalitems=total_items_count,\n        totalpurchased=total_purchased_count,\n    )\n    return response_data\n</code></pre>"},{"location":"api/#backend.api.list_shoppinglists","title":"<code>list_shoppinglists(request)</code>","text":"<p>The function <code>list_shoppinglists</code> returns a list of ShoppingLists.</p> Endpoint <ul> <li>Path: <code>/api/shoppinglists</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <p>Returns:</p> Type Description <code>List[ShoppingListOut]</code> <p>Returns a list of ShoppingList objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/shoppinglists\", response=List[ShoppingListOut])\ndef list_shoppinglists(request):\n    \"\"\"\n    The function `list_shoppinglists` returns a list of ShoppingLists.\n\n    Endpoint:\n        - **Path**: `/api/shoppinglists`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n\n    Returns:\n        (List[ShoppingListOut]): Returns a list of ShoppingList objects.\n    \"\"\"\n    qs = ShoppingList.objects.all()\n    return qs\n</code></pre>"},{"location":"api/#backend.api.list_listsbystore","title":"<code>list_listsbystore(request, store_id)</code>","text":"<p>The function <code>list_listsbystore</code> returns a list of ShoppingLists for a given Store ID.</p> Endpoint <ul> <li>Path: <code>/api/listsbystore/{store_id}</code></li> <li>Method: <code>GET</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>store_id</code> <code>int</code> <p>The ID of a Store.</p> required <p>Returns:</p> Type Description <code>List[ShoppingListOut]</code> <p>Returns a list of ShoppingList objects.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.get(\"/listsbystore/{store_id}\", response=List[ShoppingListOut])\ndef list_listsbystore(request, store_id: int):\n    \"\"\"\n    The function `list_listsbystore` returns a list of ShoppingLists for a given\n    Store ID.\n\n    Endpoint:\n        - **Path**: `/api/listsbystore/{store_id}`\n        - **Method**: `GET`\n\n    Args:\n        request ():\n        store_id (int): The ID of a Store.\n\n    Returns:\n        (List[ShoppingListOut]): Returns a list of ShoppingList objects.\n    \"\"\"\n    qs = ShoppingList.objects.all().filter(store__id=store_id)\n    return qs\n</code></pre>"},{"location":"api/#backend.api.update_shoppinglist","title":"<code>update_shoppinglist(request, shoppinglist_id, payload)</code>","text":"<p>The function <code>update_shoppinglist</code> updates a given ShoppingList.</p> Endpoint <ul> <li>Path: <code>/api/shoppinglists/{shoppinglist_id}</code></li> <li>Method: <code>PUT</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>shoppinglist_id</code> <code>int</code> <p>ID of the Shoppinglist to update.</p> required <code>payload</code> <code>ShoppingListIn</code> <p>A ShoppingList object with updates.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bpp;</code> <p>True if successfully updated.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.put(\"/shoppinglists/{shoppinglist_id}\")\ndef update_shoppinglist(request, shoppinglist_id: int, payload: ShoppingListIn):\n    \"\"\"\n    The function `update_shoppinglist` updates a given ShoppingList.\n\n    Endpoint:\n        - **Path**: `/api/shoppinglists/{shoppinglist_id}`\n        - **Method**: `PUT`\n\n    Args:\n        request ():\n        shoppinglist_id (int): ID of the Shoppinglist to update.\n        payload (ShoppingListIn): A ShoppingList object with updates.\n\n    Returns:\n        success (bpp;): True if successfully updated.\n    \"\"\"\n    shoppinglist = get_object_or_404(ShoppingList, id=shoppinglist_id)\n    shoppinglist.name = payload.name\n    shoppinglist.store_id = payload.store_id\n    shoppinglist.save()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#backend.api.delete_shoppinglist","title":"<code>delete_shoppinglist(request, shoppinglist_id)</code>","text":"<p>The function <code>delete_shoppinglist</code> deletes a given ShoppingList.</p> Endpoint <ul> <li>Path: <code>/api/shoppinglists/{shoppinglist_id}</code></li> <li>Method: <code>DELETE</code></li> </ul> <p>Parameters:</p> Name Type Description Default <code>request</code> required <code>shoppinglist_id</code> <code>int</code> <p>ID of a ShoppingList to delete.</p> required <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>True if successfully deleted.</p> Source code in <code>backend/backend/api.py</code> <pre><code>@api.delete(\"/shoppinglists/{shoppinglist_id}\")\ndef delete_shoppinglist(request, shoppinglist_id: int):\n    \"\"\"\n    The function `delete_shoppinglist` deletes a given ShoppingList.\n\n    Endpoint:\n        - **Path**: `/api/shoppinglists/{shoppinglist_id}`\n        - **Method**: `DELETE`\n\n    Args:\n        request ():\n        shoppinglist_id (int): ID of a ShoppingList to delete.\n\n    Returns:\n        success (bool): True if successfully deleted.\n    \"\"\"\n    shoppinglist = get_object_or_404(ShoppingList, id=shoppinglist_id)\n    shoppinglist.delete()\n    return {\"success\": True}\n</code></pre>"},{"location":"api/#schemas_6","title":"Schemas","text":""},{"location":"api/#backend.api.ShoppingListIn","title":"<code>ShoppingListIn</code>","text":"<p>Schema to validate a ShoppingList.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the shopping list.</p> <code>store_id</code> <code>int</code> <p>The ID of the store for the shopping list.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ShoppingListIn(Schema):\n    \"\"\"\n    Schema to validate a ShoppingList.\n\n    Attributes:\n        name (str): The name of the shopping list.\n        store_id (int): The ID of the store for the shopping list.\n    \"\"\"\n\n    name: str\n    store_id: int\n</code></pre>"},{"location":"api/#backend.api.ShoppingListOut","title":"<code>ShoppingListOut</code>","text":"<p>Schema to represent a ShoppingList.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the shopping list.</p> <code>name</code> <code>str</code> <p>The name of the shopping list.</p> <code>store_id</code> <code>int</code> <p>The ID of the store for the shopping list.</p> <code>store</code> <code>StoreOut</code> <p>The Store object.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ShoppingListOut(Schema):\n    \"\"\"\n    Schema to represent a ShoppingList.\n\n    Attributes:\n        id (int): ID of the shopping list.\n        name (str): The name of the shopping list.\n        store_id (int): The ID of the store for the shopping list.\n        store (StoreOut): The Store object.\n    \"\"\"\n\n    id: int\n    name: str\n    store_id: int\n    store: StoreOut\n</code></pre>"},{"location":"api/#backend.api.ShoppingListFull","title":"<code>ShoppingListFull</code>","text":"<p>Schema to represent a ShoppingList with ListItems assigned to it.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>ID of the shopping list.</p> <code>name</code> <code>str</code> <p>The name of the shopping list.</p> <code>store_id</code> <code>int</code> <p>The ID of the store for this shopping list.</p> <code>store</code> <code>StoreOut</code> <p>The Store object.</p> <code>aisles</code> <code>List[AislesWithItems]</code> <p>A list of aisles with listitems assigned.</p> <code>purchased_aisles</code> <code>List[AislesWithItems]</code> <p>A list of aisles with listitems marked as purchased.</p> <code>totalitems</code> <code>int</code> <p>The total number of items on the shopping list.</p> <code>totalpurchased</code> <code>int</code> <p>The total number of items marked purchased on the shopping list.</p> Source code in <code>backend/backend/api.py</code> <pre><code>class ShoppingListFull(Schema):\n    \"\"\"\n    Schema to represent a ShoppingList with ListItems assigned to it.\n\n    Attributes:\n        id (int): ID of the shopping list.\n        name (str): The name of the shopping list.\n        store_id (int): The ID of the store for this shopping list.\n        store (StoreOut): The Store object.\n        aisles (List[AislesWithItems]): A list of aisles with listitems assigned.\n        purchased_aisles (List[AislesWithItems]): A list of aisles with listitems marked as\n            purchased.\n        totalitems (int): The total number of items on the shopping list.\n        totalpurchased (int): The total number of items marked purchased on the shopping list.\n    \"\"\"\n\n    id: int\n    name: str\n    store_id: int\n    store: StoreOut\n    aisles: List[AislesWithItems]\n    purchased_aisles: List[AislesWithItems]\n    totalitems: int\n    totalpurchased: int\n</code></pre>"},{"location":"models/","title":"Models","text":""},{"location":"models/#dependencies","title":"Dependencies","text":""},{"location":"models/#api.models.SingletonModel","title":"<code>SingletonModel</code>","text":"<p>Model representing a singleton model.</p> <p>Attributes:</p> Source code in <code>backend/api/models.py</code> <pre><code>class SingletonModel(models.Model):\n    \"\"\"\n    Model representing a singleton model.\n\n    Attributes:\n    \"\"\"\n\n    class Meta:\n        abstract = True\n\n    def save(self, *args, **kwargs):\n        \"\"\"\n        Override save method to validate only one instance exists.\n        \"\"\"\n        if not self.pk and self.__class__.objects.exists():\n            raise ValidationError(\"There is already one instance of this model\")\n        return super(SingletonModel, self).save(*args, **kwargs)\n\n    def delete(self, *args, **kwargs):\n        \"\"\"\n        Override delete method to block deletes.\n        \"\"\"\n        raise ValidationError(\"You cannot delete this object\")\n</code></pre>"},{"location":"models/#api.models.SingletonModel.save","title":"<code>save(*args, **kwargs)</code>","text":"<p>Override save method to validate only one instance exists.</p> Source code in <code>backend/api/models.py</code> <pre><code>def save(self, *args, **kwargs):\n    \"\"\"\n    Override save method to validate only one instance exists.\n    \"\"\"\n    if not self.pk and self.__class__.objects.exists():\n        raise ValidationError(\"There is already one instance of this model\")\n    return super(SingletonModel, self).save(*args, **kwargs)\n</code></pre>"},{"location":"models/#api.models.SingletonModel.delete","title":"<code>delete(*args, **kwargs)</code>","text":"<p>Override delete method to block deletes.</p> Source code in <code>backend/api/models.py</code> <pre><code>def delete(self, *args, **kwargs):\n    \"\"\"\n    Override delete method to block deletes.\n    \"\"\"\n    raise ValidationError(\"You cannot delete this object\")\n</code></pre>"},{"location":"models/#store","title":"Store","text":""},{"location":"models/#api.models.Store","title":"<code>Store</code>","text":"<p>Model representing a Store.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>The name of a store. Required. Unique.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Store(models.Model):\n    \"\"\"\n    Model representing a Store.\n\n    Attributes:\n        name (CharField): The name of a store. Required. Unique.\n    \"\"\"\n\n    name = models.CharField(max_length=50, unique=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Store Object name.\n        \"\"\"\n        return self.name\n</code></pre>"},{"location":"models/#api.models.Store.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Store Object name.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Store Object name.\n    \"\"\"\n    return self.name\n</code></pre>"},{"location":"models/#aisle","title":"Aisle","text":""},{"location":"models/#api.models.Aisle","title":"<code>Aisle</code>","text":"<p>Model representing an aisle in a store.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>The name of the Aisle.</p> <code>order</code> <code>IntegerField</code> <p>The order of appearance for Aisle.</p> <code>store</code> <code>Store</code> <p>An object respresenting a store.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Aisle(models.Model):\n    \"\"\"\n    Model representing an aisle in a store.\n\n    Attributes:\n        name (CharField): The name of the Aisle.\n        order (IntegerField): The order of appearance for Aisle.\n        store (Store): An object respresenting a store.\n    \"\"\"\n\n    name = models.CharField(max_length=50)\n    order = models.IntegerField(default=1)\n    store = models.ForeignKey(Store, on_delete=models.CASCADE)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Aisle Object name.\n        \"\"\"\n        return f\"{self.store.name} | {self.name}\"\n</code></pre>"},{"location":"models/#api.models.Aisle.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Aisle Object name.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Aisle Object name.\n    \"\"\"\n    return f\"{self.store.name} | {self.name}\"\n</code></pre>"},{"location":"models/#item","title":"Item","text":""},{"location":"models/#api.models.Item","title":"<code>Item</code>","text":"<p>Model representing an item.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>The name of the Item. Unique.</p> <code>matches</code> <code>CharField</code> <p>Alternate spelling that matches.</p> <code>plural</code> <code>CharField</code> <p>Plural spelling of item name.</p> <code>aisle</code> <code>Aisle</code> <p>An object representing an aisle.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Item(models.Model):\n    \"\"\"\n    Model representing an item.\n\n    Attributes:\n        name (CharField): The name of the Item. Unique.\n        matches (CharField): Alternate spelling that matches.\n        plural (CharField): Plural spelling of item name.\n        aisle (Aisle): An object representing an aisle.\n    \"\"\"\n\n    name = models.CharField(max_length=50, unique=True)\n    matches = models.CharField(max_length=254, null=True, blank=True)\n    plural = models.CharField(max_length=50, null=True, blank=True)\n    aisle = models.ForeignKey(\n        Aisle, on_delete=models.SET_NULL, null=True, blank=True, default=None\n    )\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The Item Object name.\n        \"\"\"\n        return self.name\n</code></pre>"},{"location":"models/#api.models.Item.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The Item Object name.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The Item Object name.\n    \"\"\"\n    return self.name\n</code></pre>"},{"location":"models/#shoppinglist","title":"ShoppingList","text":""},{"location":"models/#api.models.ShoppingList","title":"<code>ShoppingList</code>","text":"<p>Model representing a ShopingList object.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>CharField</code> <p>The name of the shopping list.</p> <code>store</code> <code>Store</code> <p>An object representing a store.</p> Source code in <code>backend/api/models.py</code> <pre><code>class ShoppingList(models.Model):\n    \"\"\"\n    Model representing a ShopingList object.\n\n    Attributes:\n        name (CharField): The name of the shopping list.\n        store (Store): An object representing a store.\n    \"\"\"\n\n    name = models.CharField(max_length=50)\n    store = models.ForeignKey(Store, on_delete=models.CASCADE)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The ShoppingList Object name.\n        \"\"\"\n        return f\"{self.store.name} | {self.name}\"\n</code></pre>"},{"location":"models/#api.models.ShoppingList.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The ShoppingList Object name.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The ShoppingList Object name.\n    \"\"\"\n    return f\"{self.store.name} | {self.name}\"\n</code></pre>"},{"location":"models/#listitem","title":"ListItem","text":""},{"location":"models/#api.models.ListItem","title":"<code>ListItem</code>","text":"<p>Model representing a ListItem object.</p> <p>Attributes:</p> Name Type Description <code>qty</code> <code>IntegerField</code> <p>The numder of items for this list item.</p> <code>purchased</code> <code>BooleanField</code> <p>Wether this list item has been purchased.</p> <code>notes</code> <code>TextField</code> <p>Notes associated with this list item.</p> <code>purch_date(DateFild)</code> <code>TextField</code> <p>The date this list item was purchased.</p> <code>item</code> <code>Item</code> <p>An object representing an Item.</p> <code>aisle</code> <code>Aisle</code> <p>An object representing an Aisle.</p> <code>shopping_list</code> <code>ShoppingList</code> <p>An object representing a ShoppingList.</p> Source code in <code>backend/api/models.py</code> <pre><code>class ListItem(models.Model):\n    \"\"\"\n    Model representing a ListItem object.\n\n    Attributes:\n        qty (IntegerField): The numder of items for this list item.\n        purchased (BooleanField): Wether this list item has been purchased.\n        notes (TextField): Notes associated with this list item.\n        purch_date(DateFild): The date this list item was purchased.\n        item (Item): An object representing an Item.\n        aisle (Aisle): An object representing an Aisle.\n        shopping_list (ShoppingList): An object representing a ShoppingList.\n\n    \"\"\"\n\n    qty = models.IntegerField(default=1)\n    purchased = models.BooleanField(default=False)\n    notes = models.TextField(null=True, blank=True)\n    purch_date = models.DateField(\n        auto_now=False, auto_now_add=False, null=True, blank=True\n    )\n    item = models.ForeignKey(Item, on_delete=models.CASCADE)\n    aisle = models.ForeignKey(Aisle, on_delete=models.CASCADE, null=True)\n    shopping_list = models.ForeignKey(ShoppingList, on_delete=models.CASCADE)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The ListItem Object name.\n        \"\"\"\n        return self.item.name\n</code></pre>"},{"location":"models/#api.models.ListItem.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The ListItem Object name.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The ListItem Object name.\n    \"\"\"\n    return self.item.name\n</code></pre>"},{"location":"models/#version","title":"Version","text":""},{"location":"models/#api.models.Version","title":"<code>Version</code>","text":"<p>Model representing app version.</p> <p>Fields: - version_number (CharField): The current version of the app.</p> Source code in <code>backend/api/models.py</code> <pre><code>class Version(SingletonModel):\n    \"\"\"\n    Model representing app version.\n\n    Fields:\n    - version_number (CharField): The current version of the app.\n    \"\"\"\n\n    version_number = models.CharField(max_length=10)\n\n    def __str__(self):\n        \"\"\"\n        Returns:\n            (String): The version number.\n        \"\"\"\n        return self.version_number\n</code></pre>"},{"location":"models/#api.models.Version.__str__","title":"<code>__str__()</code>","text":"<p>Returns:</p> Type Description <code>String</code> <p>The version number.</p> Source code in <code>backend/api/models.py</code> <pre><code>def __str__(self):\n    \"\"\"\n    Returns:\n        (String): The version number.\n    \"\"\"\n    return self.version_number\n</code></pre>"}]}