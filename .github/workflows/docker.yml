name: Publish Docker Images

on:
  workflow_run:
    workflows: ["Versioning"]  # Ensure it runs after the Versioning workflow
    types:
      - completed

jobs:
  check-commit:
    runs-on: self-hosted
    outputs:
      skip: ${{ steps.check_commit.outputs.skip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Get commit message
        id: check_commit
        run: |
          msg="$(git log -1 --pretty=%B)"
          echo "Commit message: $msg"

          if [[ -z "$msg" ]]; then
            echo "No commit message found. Skipping job."
            echo "skip=true" >> $GITHUB_OUTPUT
          elif echo "$msg" | grep -Eiq '^(docs|ci):'; then
            echo "Excluded commit prefix found. Skipping job."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
  publish:
    needs: check-commit
    if: needs.check-commit.outputs.skip != 'true'
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Prepare environment file
        run: cp example.env .env
        
      - name: Extract Commit Message
        id: get_commit_message
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV

      - name: Check for 'publish' Tag
        if: "!contains(env.COMMIT_MESSAGE, 'publish')"
        run: |
          echo "No 'publish' tag found in the commit message. Skipping publish step."
          exit 0

      - name: Read Version
        id: read_version
        run: echo "VERSION=$(cat scripts/version.txt)" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          echo "Docker Hub login successful."

      - name: Build Docker Images
        run: |
          echo "Building Docker images..."
          docker compose -f docker-compose-prod.yml build
          echo "Docker images built successfully."
          
      - name: Publish Docker Images
        env:
          BACKEND_NAME: lenoreshop_backend
          FRONTEND_NAME: lenoreshop_frontend
          VERSION: ${{ env.VERSION }}
          DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "Publishing Docker images to $DOCKER_HUB_REPO..."

          # Remove latest tags if they exist
          docker rmi $DOCKER_HUB_REPO/$BACKEND_NAME:latest || true
          docker rmi $DOCKER_HUB_REPO/$FRONTEND_NAME:latest || true

          # Tag new images
          docker tag $BACKEND_NAME:production $DOCKER_HUB_REPO/$BACKEND_NAME:${VERSION}
          docker tag $FRONTEND_NAME:production $DOCKER_HUB_REPO/$FRONTEND_NAME:${VERSION}
          docker tag $BACKEND_NAME:production $DOCKER_HUB_REPO/$BACKEND_NAME:latest
          docker tag $FRONTEND_NAME:production $DOCKER_HUB_REPO/$FRONTEND_NAME:latest

          # Push new images
          docker push $DOCKER_HUB_REPO/$BACKEND_NAME:${VERSION}
          docker push $DOCKER_HUB_REPO/$FRONTEND_NAME:${VERSION}
          docker push $DOCKER_HUB_REPO/$BACKEND_NAME:latest
          docker push $DOCKER_HUB_REPO/$FRONTEND_NAME:latest

          echo "Published Docker images for version ${VERSION}."
